// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210601previewstorage

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/microsoft.servicebus/v1alpha1api20210101previewstorage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Storage version of v1alpha1api20210601preview.NamespacesTopic
//Generated from: https://schema.management.azure.com/schemas/2021-06-01-preview/Microsoft.ServiceBus.json#/resourceDefinitions/namespaces_topics
type NamespacesTopic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NamespacesTopics_Spec `json:"spec,omitempty"`
	Status            SBTopic_Status        `json:"status,omitempty"`
}

var _ conditions.Conditioner = &NamespacesTopic{}

// GetConditions returns the conditions of the resource
func (namespacesTopic *NamespacesTopic) GetConditions() conditions.Conditions {
	return namespacesTopic.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (namespacesTopic *NamespacesTopic) SetConditions(conditions conditions.Conditions) {
	namespacesTopic.Status.Conditions = conditions
}

var _ conversion.Convertible = &NamespacesTopic{}

// ConvertFrom populates our NamespacesTopic from the provided hub NamespacesTopic
func (namespacesTopic *NamespacesTopic) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20210101previewstorage.NamespacesTopic)
	if !ok {
		return fmt.Errorf("expected storage:microsoft.servicebus/v1alpha1api20210101previewstorage/NamespacesTopic but received %T instead", hub)
	}

	return namespacesTopic.AssignPropertiesFromNamespacesTopic(source)
}

// ConvertTo populates the provided hub NamespacesTopic from our NamespacesTopic
func (namespacesTopic *NamespacesTopic) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20210101previewstorage.NamespacesTopic)
	if !ok {
		return fmt.Errorf("expected storage:microsoft.servicebus/v1alpha1api20210101previewstorage/NamespacesTopic but received %T instead", hub)
	}

	return namespacesTopic.AssignPropertiesToNamespacesTopic(destination)
}

var _ genruntime.KubernetesResource = &NamespacesTopic{}

// AzureName returns the Azure name of the resource
func (namespacesTopic *NamespacesTopic) AzureName() string {
	return namespacesTopic.Spec.AzureName
}

// GetResourceKind returns the kind of the resource
func (namespacesTopic *NamespacesTopic) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (namespacesTopic *NamespacesTopic) GetSpec() genruntime.ConvertibleSpec {
	return &namespacesTopic.Spec
}

// GetStatus returns the status of this resource
func (namespacesTopic *NamespacesTopic) GetStatus() genruntime.ConvertibleStatus {
	return &namespacesTopic.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.ServiceBus/namespaces/topics"
func (namespacesTopic *NamespacesTopic) GetType() string {
	return "Microsoft.ServiceBus/namespaces/topics"
}

// NewEmptyStatus returns a new empty (blank) status
func (namespacesTopic *NamespacesTopic) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &SBTopic_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (namespacesTopic *NamespacesTopic) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(namespacesTopic.Spec)
	return &genruntime.ResourceReference{
		Group:     group,
		Kind:      kind,
		Namespace: namespacesTopic.Namespace,
		Name:      namespacesTopic.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (namespacesTopic *NamespacesTopic) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*SBTopic_Status); ok {
		namespacesTopic.Status = *st
		return nil
	}

	// Convert status to required version
	var st SBTopic_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	namespacesTopic.Status = st
	return nil
}

// AssignPropertiesFromNamespacesTopic populates our NamespacesTopic from the provided source NamespacesTopic
func (namespacesTopic *NamespacesTopic) AssignPropertiesFromNamespacesTopic(source *v1alpha1api20210101previewstorage.NamespacesTopic) error {

	// Spec
	var spec NamespacesTopics_Spec
	err := spec.AssignPropertiesFromNamespacesTopicsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromNamespacesTopicsSpec()")
	}
	namespacesTopic.Spec = spec

	// Status
	var status SBTopic_Status
	err = status.AssignPropertiesFromSBTopicStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromSBTopicStatus()")
	}
	namespacesTopic.Status = status

	// No error
	return nil
}

// AssignPropertiesToNamespacesTopic populates the provided destination NamespacesTopic from our NamespacesTopic
func (namespacesTopic *NamespacesTopic) AssignPropertiesToNamespacesTopic(destination *v1alpha1api20210101previewstorage.NamespacesTopic) error {

	// Spec
	var spec v1alpha1api20210101previewstorage.NamespacesTopics_Spec
	err := namespacesTopic.Spec.AssignPropertiesToNamespacesTopicsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToNamespacesTopicsSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210101previewstorage.SBTopic_Status
	err = namespacesTopic.Status.AssignPropertiesToSBTopicStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToSBTopicStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (namespacesTopic *NamespacesTopic) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: namespacesTopic.Spec.OriginalVersion,
		Kind:    "NamespacesTopic",
	}
}

// +kubebuilder:object:root=true
//Storage version of v1alpha1api20210601preview.NamespacesTopic
//Generated from: https://schema.management.azure.com/schemas/2021-06-01-preview/Microsoft.ServiceBus.json#/resourceDefinitions/namespaces_topics
type NamespacesTopicList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NamespacesTopic `json:"items"`
}

//Storage version of v1alpha1api20210601preview.NamespacesTopics_Spec
type NamespacesTopics_Spec struct {
	AutoDeleteOnIdle *string `json:"autoDeleteOnIdle,omitempty"`

	// +kubebuilder:validation:MinLength=1
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName                           string  `json:"azureName"`
	DefaultMessageTimeToLive            *string `json:"defaultMessageTimeToLive,omitempty"`
	DuplicateDetectionHistoryTimeWindow *string `json:"duplicateDetectionHistoryTimeWindow,omitempty"`
	EnableBatchedOperations             *bool   `json:"enableBatchedOperations,omitempty"`
	EnableExpress                       *bool   `json:"enableExpress,omitempty"`
	EnablePartitioning                  *bool   `json:"enablePartitioning,omitempty"`
	Location                            *string `json:"location,omitempty"`
	MaxMessageSizeInKilobytes           *int    `json:"maxMessageSizeInKilobytes,omitempty"`
	MaxSizeInMegabytes                  *int    `json:"maxSizeInMegabytes,omitempty"`
	OriginalVersion                     string  `json:"originalVersion"`

	// +kubebuilder:validation:Required
	Owner                      genruntime.KnownResourceReference `group:"microsoft.servicebus.azure.com" json:"owner" kind:"Namespace"`
	PropertyBag                genruntime.PropertyBag            `json:"$propertyBag,omitempty"`
	RequiresDuplicateDetection *bool                             `json:"requiresDuplicateDetection,omitempty"`
	SupportOrdering            *bool                             `json:"supportOrdering,omitempty"`
	Tags                       map[string]string                 `json:"tags,omitempty"`
}

var _ genruntime.ConvertibleSpec = &NamespacesTopics_Spec{}

// ConvertSpecFrom populates our NamespacesTopics_Spec from the provided source
func (namespacesTopicsSpec *NamespacesTopics_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210101previewstorage.NamespacesTopics_Spec)
	if ok {
		// Populate our instance from source
		return namespacesTopicsSpec.AssignPropertiesFromNamespacesTopicsSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210101previewstorage.NamespacesTopics_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = namespacesTopicsSpec.AssignPropertiesFromNamespacesTopicsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our NamespacesTopics_Spec
func (namespacesTopicsSpec *NamespacesTopics_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210101previewstorage.NamespacesTopics_Spec)
	if ok {
		// Populate destination from our instance
		return namespacesTopicsSpec.AssignPropertiesToNamespacesTopicsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210101previewstorage.NamespacesTopics_Spec{}
	err := namespacesTopicsSpec.AssignPropertiesToNamespacesTopicsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromNamespacesTopicsSpec populates our NamespacesTopics_Spec from the provided source NamespacesTopics_Spec
func (namespacesTopicsSpec *NamespacesTopics_Spec) AssignPropertiesFromNamespacesTopicsSpec(source *v1alpha1api20210101previewstorage.NamespacesTopics_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AutoDeleteOnIdle
	namespacesTopicsSpec.AutoDeleteOnIdle = genruntime.ClonePointerToString(source.AutoDeleteOnIdle)

	// AzureName
	namespacesTopicsSpec.AzureName = source.AzureName

	// DefaultMessageTimeToLive
	namespacesTopicsSpec.DefaultMessageTimeToLive = genruntime.ClonePointerToString(source.DefaultMessageTimeToLive)

	// DuplicateDetectionHistoryTimeWindow
	namespacesTopicsSpec.DuplicateDetectionHistoryTimeWindow = genruntime.ClonePointerToString(source.DuplicateDetectionHistoryTimeWindow)

	// EnableBatchedOperations
	if source.EnableBatchedOperations != nil {
		enableBatchedOperation := *source.EnableBatchedOperations
		namespacesTopicsSpec.EnableBatchedOperations = &enableBatchedOperation
	} else {
		namespacesTopicsSpec.EnableBatchedOperations = nil
	}

	// EnableExpress
	if source.EnableExpress != nil {
		enableExpress := *source.EnableExpress
		namespacesTopicsSpec.EnableExpress = &enableExpress
	} else {
		namespacesTopicsSpec.EnableExpress = nil
	}

	// EnablePartitioning
	if source.EnablePartitioning != nil {
		enablePartitioning := *source.EnablePartitioning
		namespacesTopicsSpec.EnablePartitioning = &enablePartitioning
	} else {
		namespacesTopicsSpec.EnablePartitioning = nil
	}

	// Location
	namespacesTopicsSpec.Location = genruntime.ClonePointerToString(source.Location)

	// MaxMessageSizeInKilobytes
	if propertyBag.Contains("MaxMessageSizeInKilobytes") {
		var maxMessageSizeInKilobyte int
		err := propertyBag.Pull("MaxMessageSizeInKilobytes", &maxMessageSizeInKilobyte)
		if err != nil {
			return errors.Wrap(err, "pulling 'MaxMessageSizeInKilobytes' from propertyBag")
		}

		namespacesTopicsSpec.MaxMessageSizeInKilobytes = &maxMessageSizeInKilobyte
	} else {
		namespacesTopicsSpec.MaxMessageSizeInKilobytes = nil
	}

	// MaxSizeInMegabytes
	namespacesTopicsSpec.MaxSizeInMegabytes = genruntime.ClonePointerToInt(source.MaxSizeInMegabytes)

	// OriginalVersion
	namespacesTopicsSpec.OriginalVersion = source.OriginalVersion

	// Owner
	namespacesTopicsSpec.Owner = source.Owner.Copy()

	// RequiresDuplicateDetection
	if source.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *source.RequiresDuplicateDetection
		namespacesTopicsSpec.RequiresDuplicateDetection = &requiresDuplicateDetection
	} else {
		namespacesTopicsSpec.RequiresDuplicateDetection = nil
	}

	// SupportOrdering
	if source.SupportOrdering != nil {
		supportOrdering := *source.SupportOrdering
		namespacesTopicsSpec.SupportOrdering = &supportOrdering
	} else {
		namespacesTopicsSpec.SupportOrdering = nil
	}

	// Tags
	namespacesTopicsSpec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		namespacesTopicsSpec.PropertyBag = propertyBag
	} else {
		namespacesTopicsSpec.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNamespacesTopicsSpec populates the provided destination NamespacesTopics_Spec from our NamespacesTopics_Spec
func (namespacesTopicsSpec *NamespacesTopics_Spec) AssignPropertiesToNamespacesTopicsSpec(destination *v1alpha1api20210101previewstorage.NamespacesTopics_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(namespacesTopicsSpec.PropertyBag)

	// AutoDeleteOnIdle
	destination.AutoDeleteOnIdle = genruntime.ClonePointerToString(namespacesTopicsSpec.AutoDeleteOnIdle)

	// AzureName
	destination.AzureName = namespacesTopicsSpec.AzureName

	// DefaultMessageTimeToLive
	destination.DefaultMessageTimeToLive = genruntime.ClonePointerToString(namespacesTopicsSpec.DefaultMessageTimeToLive)

	// DuplicateDetectionHistoryTimeWindow
	destination.DuplicateDetectionHistoryTimeWindow = genruntime.ClonePointerToString(namespacesTopicsSpec.DuplicateDetectionHistoryTimeWindow)

	// EnableBatchedOperations
	if namespacesTopicsSpec.EnableBatchedOperations != nil {
		enableBatchedOperation := *namespacesTopicsSpec.EnableBatchedOperations
		destination.EnableBatchedOperations = &enableBatchedOperation
	} else {
		destination.EnableBatchedOperations = nil
	}

	// EnableExpress
	if namespacesTopicsSpec.EnableExpress != nil {
		enableExpress := *namespacesTopicsSpec.EnableExpress
		destination.EnableExpress = &enableExpress
	} else {
		destination.EnableExpress = nil
	}

	// EnablePartitioning
	if namespacesTopicsSpec.EnablePartitioning != nil {
		enablePartitioning := *namespacesTopicsSpec.EnablePartitioning
		destination.EnablePartitioning = &enablePartitioning
	} else {
		destination.EnablePartitioning = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(namespacesTopicsSpec.Location)

	// MaxMessageSizeInKilobytes
	if namespacesTopicsSpec.MaxMessageSizeInKilobytes != nil {
		propertyBag.Add("MaxMessageSizeInKilobytes", *namespacesTopicsSpec.MaxMessageSizeInKilobytes)
	}

	// MaxSizeInMegabytes
	destination.MaxSizeInMegabytes = genruntime.ClonePointerToInt(namespacesTopicsSpec.MaxSizeInMegabytes)

	// OriginalVersion
	destination.OriginalVersion = namespacesTopicsSpec.OriginalVersion

	// Owner
	destination.Owner = namespacesTopicsSpec.Owner.Copy()

	// RequiresDuplicateDetection
	if namespacesTopicsSpec.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *namespacesTopicsSpec.RequiresDuplicateDetection
		destination.RequiresDuplicateDetection = &requiresDuplicateDetection
	} else {
		destination.RequiresDuplicateDetection = nil
	}

	// SupportOrdering
	if namespacesTopicsSpec.SupportOrdering != nil {
		supportOrdering := *namespacesTopicsSpec.SupportOrdering
		destination.SupportOrdering = &supportOrdering
	} else {
		destination.SupportOrdering = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(namespacesTopicsSpec.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Storage version of v1alpha1api20210601preview.SBTopic_Status
//Generated from:
type SBTopic_Status struct {
	AccessedAt                          *string                     `json:"accessedAt,omitempty"`
	AutoDeleteOnIdle                    *string                     `json:"autoDeleteOnIdle,omitempty"`
	Conditions                          []conditions.Condition      `json:"conditions,omitempty"`
	CountDetails                        *MessageCountDetails_Status `json:"countDetails,omitempty"`
	CreatedAt                           *string                     `json:"createdAt,omitempty"`
	DefaultMessageTimeToLive            *string                     `json:"defaultMessageTimeToLive,omitempty"`
	DuplicateDetectionHistoryTimeWindow *string                     `json:"duplicateDetectionHistoryTimeWindow,omitempty"`
	EnableBatchedOperations             *bool                       `json:"enableBatchedOperations,omitempty"`
	EnableExpress                       *bool                       `json:"enableExpress,omitempty"`
	EnablePartitioning                  *bool                       `json:"enablePartitioning,omitempty"`
	Id                                  *string                     `json:"id,omitempty"`
	MaxMessageSizeInKilobytes           *int                        `json:"maxMessageSizeInKilobytes,omitempty"`
	MaxSizeInMegabytes                  *int                        `json:"maxSizeInMegabytes,omitempty"`
	Name                                *string                     `json:"name,omitempty"`
	PropertyBag                         genruntime.PropertyBag      `json:"$propertyBag,omitempty"`
	RequiresDuplicateDetection          *bool                       `json:"requiresDuplicateDetection,omitempty"`
	SizeInBytes                         *int                        `json:"sizeInBytes,omitempty"`
	Status                              *string                     `json:"status,omitempty"`
	SubscriptionCount                   *int                        `json:"subscriptionCount,omitempty"`
	SupportOrdering                     *bool                       `json:"supportOrdering,omitempty"`
	SystemData                          *SystemData_Status          `json:"systemData,omitempty"`
	Type                                *string                     `json:"type,omitempty"`
	UpdatedAt                           *string                     `json:"updatedAt,omitempty"`
}

var _ genruntime.ConvertibleStatus = &SBTopic_Status{}

// ConvertStatusFrom populates our SBTopic_Status from the provided source
func (sbTopicStatus *SBTopic_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210101previewstorage.SBTopic_Status)
	if ok {
		// Populate our instance from source
		return sbTopicStatus.AssignPropertiesFromSBTopicStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210101previewstorage.SBTopic_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = sbTopicStatus.AssignPropertiesFromSBTopicStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our SBTopic_Status
func (sbTopicStatus *SBTopic_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210101previewstorage.SBTopic_Status)
	if ok {
		// Populate destination from our instance
		return sbTopicStatus.AssignPropertiesToSBTopicStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210101previewstorage.SBTopic_Status{}
	err := sbTopicStatus.AssignPropertiesToSBTopicStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

// AssignPropertiesFromSBTopicStatus populates our SBTopic_Status from the provided source SBTopic_Status
func (sbTopicStatus *SBTopic_Status) AssignPropertiesFromSBTopicStatus(source *v1alpha1api20210101previewstorage.SBTopic_Status) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AccessedAt
	sbTopicStatus.AccessedAt = genruntime.ClonePointerToString(source.AccessedAt)

	// AutoDeleteOnIdle
	sbTopicStatus.AutoDeleteOnIdle = genruntime.ClonePointerToString(source.AutoDeleteOnIdle)

	// Conditions
	sbTopicStatus.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CountDetails
	if source.CountDetails != nil {
		var countDetail MessageCountDetails_Status
		err := countDetail.AssignPropertiesFromMessageCountDetailsStatus(source.CountDetails)
		if err != nil {
			return errors.Wrap(err, "populating CountDetails from CountDetails, calling AssignPropertiesFromMessageCountDetailsStatus()")
		}
		sbTopicStatus.CountDetails = &countDetail
	} else {
		sbTopicStatus.CountDetails = nil
	}

	// CreatedAt
	sbTopicStatus.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// DefaultMessageTimeToLive
	sbTopicStatus.DefaultMessageTimeToLive = genruntime.ClonePointerToString(source.DefaultMessageTimeToLive)

	// DuplicateDetectionHistoryTimeWindow
	sbTopicStatus.DuplicateDetectionHistoryTimeWindow = genruntime.ClonePointerToString(source.DuplicateDetectionHistoryTimeWindow)

	// EnableBatchedOperations
	if source.EnableBatchedOperations != nil {
		enableBatchedOperation := *source.EnableBatchedOperations
		sbTopicStatus.EnableBatchedOperations = &enableBatchedOperation
	} else {
		sbTopicStatus.EnableBatchedOperations = nil
	}

	// EnableExpress
	if source.EnableExpress != nil {
		enableExpress := *source.EnableExpress
		sbTopicStatus.EnableExpress = &enableExpress
	} else {
		sbTopicStatus.EnableExpress = nil
	}

	// EnablePartitioning
	if source.EnablePartitioning != nil {
		enablePartitioning := *source.EnablePartitioning
		sbTopicStatus.EnablePartitioning = &enablePartitioning
	} else {
		sbTopicStatus.EnablePartitioning = nil
	}

	// Id
	sbTopicStatus.Id = genruntime.ClonePointerToString(source.Id)

	// MaxMessageSizeInKilobytes
	if propertyBag.Contains("MaxMessageSizeInKilobytes") {
		var maxMessageSizeInKilobyte int
		err := propertyBag.Pull("MaxMessageSizeInKilobytes", &maxMessageSizeInKilobyte)
		if err != nil {
			return errors.Wrap(err, "pulling 'MaxMessageSizeInKilobytes' from propertyBag")
		}

		sbTopicStatus.MaxMessageSizeInKilobytes = &maxMessageSizeInKilobyte
	} else {
		sbTopicStatus.MaxMessageSizeInKilobytes = nil
	}

	// MaxSizeInMegabytes
	sbTopicStatus.MaxSizeInMegabytes = genruntime.ClonePointerToInt(source.MaxSizeInMegabytes)

	// Name
	sbTopicStatus.Name = genruntime.ClonePointerToString(source.Name)

	// RequiresDuplicateDetection
	if source.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *source.RequiresDuplicateDetection
		sbTopicStatus.RequiresDuplicateDetection = &requiresDuplicateDetection
	} else {
		sbTopicStatus.RequiresDuplicateDetection = nil
	}

	// SizeInBytes
	sbTopicStatus.SizeInBytes = genruntime.ClonePointerToInt(source.SizeInBytes)

	// Status
	sbTopicStatus.Status = genruntime.ClonePointerToString(source.Status)

	// SubscriptionCount
	sbTopicStatus.SubscriptionCount = genruntime.ClonePointerToInt(source.SubscriptionCount)

	// SupportOrdering
	if source.SupportOrdering != nil {
		supportOrdering := *source.SupportOrdering
		sbTopicStatus.SupportOrdering = &supportOrdering
	} else {
		sbTopicStatus.SupportOrdering = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemDataStatus(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "populating SystemData from SystemData, calling AssignPropertiesFromSystemDataStatus()")
		}
		sbTopicStatus.SystemData = &systemDatum
	} else {
		sbTopicStatus.SystemData = nil
	}

	// Type
	sbTopicStatus.Type = genruntime.ClonePointerToString(source.Type)

	// UpdatedAt
	sbTopicStatus.UpdatedAt = genruntime.ClonePointerToString(source.UpdatedAt)

	// Update the property bag
	if len(propertyBag) > 0 {
		sbTopicStatus.PropertyBag = propertyBag
	} else {
		sbTopicStatus.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSBTopicStatus populates the provided destination SBTopic_Status from our SBTopic_Status
func (sbTopicStatus *SBTopic_Status) AssignPropertiesToSBTopicStatus(destination *v1alpha1api20210101previewstorage.SBTopic_Status) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(sbTopicStatus.PropertyBag)

	// AccessedAt
	destination.AccessedAt = genruntime.ClonePointerToString(sbTopicStatus.AccessedAt)

	// AutoDeleteOnIdle
	destination.AutoDeleteOnIdle = genruntime.ClonePointerToString(sbTopicStatus.AutoDeleteOnIdle)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(sbTopicStatus.Conditions)

	// CountDetails
	if sbTopicStatus.CountDetails != nil {
		var countDetail v1alpha1api20210101previewstorage.MessageCountDetails_Status
		err := (*sbTopicStatus.CountDetails).AssignPropertiesToMessageCountDetailsStatus(&countDetail)
		if err != nil {
			return errors.Wrap(err, "populating CountDetails from CountDetails, calling AssignPropertiesToMessageCountDetailsStatus()")
		}
		destination.CountDetails = &countDetail
	} else {
		destination.CountDetails = nil
	}

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(sbTopicStatus.CreatedAt)

	// DefaultMessageTimeToLive
	destination.DefaultMessageTimeToLive = genruntime.ClonePointerToString(sbTopicStatus.DefaultMessageTimeToLive)

	// DuplicateDetectionHistoryTimeWindow
	destination.DuplicateDetectionHistoryTimeWindow = genruntime.ClonePointerToString(sbTopicStatus.DuplicateDetectionHistoryTimeWindow)

	// EnableBatchedOperations
	if sbTopicStatus.EnableBatchedOperations != nil {
		enableBatchedOperation := *sbTopicStatus.EnableBatchedOperations
		destination.EnableBatchedOperations = &enableBatchedOperation
	} else {
		destination.EnableBatchedOperations = nil
	}

	// EnableExpress
	if sbTopicStatus.EnableExpress != nil {
		enableExpress := *sbTopicStatus.EnableExpress
		destination.EnableExpress = &enableExpress
	} else {
		destination.EnableExpress = nil
	}

	// EnablePartitioning
	if sbTopicStatus.EnablePartitioning != nil {
		enablePartitioning := *sbTopicStatus.EnablePartitioning
		destination.EnablePartitioning = &enablePartitioning
	} else {
		destination.EnablePartitioning = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(sbTopicStatus.Id)

	// MaxMessageSizeInKilobytes
	if sbTopicStatus.MaxMessageSizeInKilobytes != nil {
		propertyBag.Add("MaxMessageSizeInKilobytes", *sbTopicStatus.MaxMessageSizeInKilobytes)
	}

	// MaxSizeInMegabytes
	destination.MaxSizeInMegabytes = genruntime.ClonePointerToInt(sbTopicStatus.MaxSizeInMegabytes)

	// Name
	destination.Name = genruntime.ClonePointerToString(sbTopicStatus.Name)

	// RequiresDuplicateDetection
	if sbTopicStatus.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *sbTopicStatus.RequiresDuplicateDetection
		destination.RequiresDuplicateDetection = &requiresDuplicateDetection
	} else {
		destination.RequiresDuplicateDetection = nil
	}

	// SizeInBytes
	destination.SizeInBytes = genruntime.ClonePointerToInt(sbTopicStatus.SizeInBytes)

	// Status
	destination.Status = genruntime.ClonePointerToString(sbTopicStatus.Status)

	// SubscriptionCount
	destination.SubscriptionCount = genruntime.ClonePointerToInt(sbTopicStatus.SubscriptionCount)

	// SupportOrdering
	if sbTopicStatus.SupportOrdering != nil {
		supportOrdering := *sbTopicStatus.SupportOrdering
		destination.SupportOrdering = &supportOrdering
	} else {
		destination.SupportOrdering = nil
	}

	// SystemData
	if sbTopicStatus.SystemData != nil {
		var systemDatum v1alpha1api20210101previewstorage.SystemData_Status
		err := (*sbTopicStatus.SystemData).AssignPropertiesToSystemDataStatus(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "populating SystemData from SystemData, calling AssignPropertiesToSystemDataStatus()")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(sbTopicStatus.Type)

	// UpdatedAt
	destination.UpdatedAt = genruntime.ClonePointerToString(sbTopicStatus.UpdatedAt)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&NamespacesTopic{}, &NamespacesTopicList{})
}
